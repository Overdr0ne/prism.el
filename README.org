#+TITLE: prism.el

#+PROPERTY: LOGGING nil

# Note: This readme works with the org-make-toc <https://github.com/alphapapa/org-make-toc> package, which automatically updates the table of contents.

# [[https://melpa.org/#/package-name][file:https://melpa.org/packages/prism-badge.svg]] [[https://stable.melpa.org/#/package-name][file:https://stable.melpa.org/packages/prism-badge.svg]]

=prism= disperses Lisp forms into a spectrum of colors by depth.  It adds rather than replaces fontification, so it doesn't override non-color face attributes, such as bold, italic, etc.

*Note:* This package is in prototype stages.  Beware of bugs.

* Screenshots
:PROPERTIES:
:TOC:      ignore
:END:

One of the benefits of =prism= is making it easy to see which list elements are in.  For example, in this excerpt from =org-get-entries-from-diary= from =org-agenda.el=, the =funcall='s first argument is an unusually indented =if= form, and the indentation nearly aligns the =funcall='s second argument, =date=, at the column where the =if='s /else/ clause would usually be.  But with depth-based colorization, it's easy to see that =date= and =1= are arguments to =funcall=, not part of the =if= form.

It's also easy to distinguish the =diary-list-entries-hook= variable's value form from other variables, and the =entries= variable's different color clearly shows that it has no value form.

[[images/one-armed-if.png]]

It's easy to adjust the colors with ~prism-set-faces~.  Here are some examples.

You can use just a few faces in combination with the =desaturations= and =lightens= to create a palette of colors:

[[images/2-faces.png]]
[[images/4-faces.png]]

Or even a single color, going in one direction:

[[images/1-color.png]]

...or the other:

[[images/1-color-reversed.png]]

If you use [[https://github.com/bbatsov/solarized-emacs][solarized-theme]], you can use ~solarized-with-color-variables~ to get colors from the theme:

[[images/1.png]]
[[images/2.png]]
[[images/3.png]]
[[images/4.png]]
[[images/5.png]]

You can shuffle the order of the colors until you find a pattern you like:

[[images/shuffled.png]]

You can even set the background color instead (similar to [[https://github.com/seanirby/rainbow-blocks-bg][rainbow-blocks-bg]], but not optimized for this case yet):

[[images/background.png]]

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      this
:END:
  -  [[#comparisons][Comparisons]]
  -  [[#installation][Installation]]
  -  [[#usage][Usage]]
  -  [[#changelog][Changelog]]
  -  [[#credits][Credits]]

* Comparisons

=prism= is much like [[https://github.com/istib/rainbow-blocks][rainbow-blocks]], but it differs in a few ways:

+  =prism= adds to the ~face~ text property, which respects existing fontification, while =rainbow-blocks= sets the ~font-lock-face~ text property, which overrides existing fontification.  This means that =prism= is compatible with packages like [[https://github.com/alphapapa/highlight-function-calls][highlight-function-calls]] and [[https://github.com/Fanael/highlight-quoted][highlight-quoted]].
+  =prism= uses ~font-lock-add-keywords~, while =rainbow-blocks= uses ~jit-lock-register~.  Which is better?  Good question.  Hopefully, the former...
+  =prism= highlights parens with the color of the outer list's symbols, which helps parens stand out from symbols.  This is a matter of preference, of course, and an option may be added to configure this in the future.

* Installation
:PROPERTIES:
:TOC:      0
:END:

The easiest way is to use [[https://framagit.org/steckerhalter/quelpa-use-package][quelpa-use-package]] like this:

#+BEGIN_SRC elisp
  (use-package prism
    :quelpa (prism :fetcher github :repo "alphapapa/prism.el"))
#+END_SRC

* Usage
:PROPERTIES:
:TOC:      0
:END:

1.  Use function ~prism-set-faces~ to set colors according to your preferences.  The ~:colors~ argument should be a list of color strings (i.e. color names or RGB hex values) or faces (for which their foreground color is used).
2.  Run command ~prism-mode~ to enable it in the current buffer.

* Changelog
:PROPERTIES:
:TOC:      0
:END:

** 0.1-pre

Early prototype stages.

* Credits

Inspired by [[https://github.com/istib/rainbow-blocks][rainbow-blocks]], [[https://github.com/Fanael/rainbow-identifiers][rainbow-identifiers]], and [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]].

* Development
:PROPERTIES:
:TOC:      ignore
:END:

Bug reports, feature requests, suggestions â€” /oh my/!

In the event that a bug in the font-locking functions cause Emacs to enter an infinite loop, you can stop it without killing Emacs by following these steps:

1.  From a shell, run ~pkill -SIGUSR2 emacs~.  Usually once is enough, but not always.
2.  After Emacs displays a backtrace, switch to the buffer where ~prism-mode~ was enabled and call ~prism-mode~ again to disable it.
3.  Please report the backtrace to the issue tracker so it can be fixed.  Include contents of the buffer when possible.

* License
:PROPERTIES:
:TOC:      ignore
:END:

GPLv3

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# End:


