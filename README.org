#+TITLE: prism.el

#+PROPERTY: LOGGING nil

# Note: This readme works with the org-make-toc <https://github.com/alphapapa/org-make-toc> package, which automatically updates the table of contents.

# [[https://melpa.org/#/package-name][file:https://melpa.org/packages/prism-badge.svg]] [[https://stable.melpa.org/#/package-name][file:https://stable.melpa.org/packages/prism-badge.svg]]

=prism= disperses lisp forms into a spectrum of color by depth.  It's similar to =rainbow-blocks=, but it respects existing non-color face properties, and allows flexible configuration of faces and colors.  It also optionally colorizes strings and/or comments by code depth in a similar, customizable way.

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      this
:END:
  -  [[#screenshots][Screenshots]]
  -  [[#comparisons][Comparisons]]
  -  [[#installation][Installation]]
  -  [[#usage][Usage]]
  -  [[#changelog][Changelog]]
  -  [[#credits][Credits]]

* Screenshots

One of the benefits of =prism= is making it easy to see which list elements are in.  For example, in this excerpt from =org-get-entries-from-diary= from =org-agenda.el=, the =funcall='s first argument is an unusually indented =if= form, and the indentation nearly aligns the =funcall='s second argument, =date=, at the column where the =if='s /else/ clause would usually be.  But with depth-based colorization, it's easy to see that =date= and =1= are arguments to =funcall=, not part of the =if= form.

It's also easy to distinguish the =diary-list-entries-hook= variable's value form from other variables, and the =entries= variable's different color clearly shows that it has no value form.

[[images/one-armed-if.png]]

It's easy to adjust the colors with ~prism-set-colors~.  Here are some examples.

You can use just a few faces in combination with the =desaturations= and =lightens= to create a palette of colors:

[[images/2-faces.png]]
[[images/4-faces.png]]

Or even a single color, going in one direction:

[[images/1-color.png]]

...or the other:

[[images/1-color-reversed.png]]

The default configuration looks decent in the default Emacs theme:

[[images/default-emacs.png]]

If you use [[https://github.com/hlissner/emacs-doom-themes][Doom themes]], you can use =doom-color= to get colors from the theme:

[[images/doom-spacegrey.png]]

But some of them look nice without any customization, like =doom-gruvbox=:

[[images/doom-gruvbox.png]]

If you use [[https://github.com/bbatsov/solarized-emacs][solarized-theme]], you can use ~solarized-with-color-variables~ to get colors from the theme:

[[images/1.png]]

And you can adjust the palette extensively by changing the applied desaturation and lightening:

[[images/2.png]]
[[images/3.png]]
[[images/5.png]]

You can shuffle the order of the colors until you find a pattern you like:

[[images/shuffled.png]]

You can even set the background color instead (similar to [[https://github.com/seanirby/rainbow-blocks-bg][rainbow-blocks-bg]], but not optimized for this case yet):

[[images/background.png]]

It may also be useful for non-Lisp buffers.  For example, here's an example of JSON in =prism-mode=:

[[images/json.png]]

And here's an Emacs C function:

[[images/c.png]]

* Comparisons

=prism= is much like [[https://github.com/istib/rainbow-blocks][rainbow-blocks]], but it differs in a few ways:

+  =prism= optionally colorizes comments and strings according to the depth of their surrounding code.
+  =prism= highlights parens with the color of the outer list's symbols, which helps parens stand out from symbols and shows which depth surrounds a list.
+  =prism= adds to the ~face~ text property, which respects existing fontification, while =rainbow-blocks= sets the ~font-lock-face~ text property, which overrides existing fontification.  This means that =prism= is compatible with packages like [[https://github.com/alphapapa/highlight-function-calls][highlight-function-calls]] and [[https://github.com/Fanael/highlight-quoted][highlight-quoted]].
+  =prism= uses ~font-lock-add-keywords~, while =rainbow-blocks= uses ~jit-lock-register~.  Which is better?  Good question.  Hopefully, the former...

* Installation
:PROPERTIES:
:TOC:      0
:END:

The easiest way is to use [[https://framagit.org/steckerhalter/quelpa-use-package][quelpa-use-package]] like this:

#+BEGIN_SRC elisp
  (use-package prism
    :quelpa (prism :fetcher github :repo "alphapapa/prism.el"))
#+END_SRC

* Usage
:PROPERTIES:
:TOC:      0
:END:

1.  Run command ~prism-mode~ to enable it in the current buffer.
2.  Enjoy.

When a theme is loaded or disabled, colors are automatically updated.

To customize, see the =prism= customization group, e.g. by using @@html:<kbd>@@M-x customize-group RET prism RET@@html:</kbd>@@.  For example, by default, comments and strings are colorized according to depth, similarly to code, but this can be disabled.

** Advanced

More advanced customization of faces is done by calling =prism-set-colors=, which can override the default settings and perform additional color manipulations.  The primary argument is =COLORS=, which should be a list of colors, each of which may be a name, a hex RGB string, or a face name (of which the foreground color is used).  Note that the list of colors need not be as long as the number of faces that's actually set (e.g. the default is 16 faces), because the colors are automatically repeated and adjusted as necessary.

If =prism-set-colors= is called with the =SAVE= argument, the results are saved to customization options so that =prism-mode= will use those colors by default.

Here's an example that the author finds pleasant (seen in the first screenshot):

#+BEGIN_SRC elisp :exports code :results silent 
  (prism-set-colors :num 16
    :desaturations (cl-loop for i from 0 below 16
                            collect (* i 2.5))
    :lightens (cl-loop for i from 0 below 16
                       collect (* i 2.5))
    :colors (list "dodgerblue" "medium sea green" "sandy brown")

    :comments-fn
    (lambda (color)
      (prism-blend color
                   (face-attribute 'font-lock-comment-face :foreground) 0.25))

    :strings-fn
    (lambda (color)
      (prism-blend color "white" 0.5)))
#+END_SRC

* Changelog
:PROPERTIES:
:TOC:      0
:END:

** 0.1-pre

Early prototype stages.

* Credits

Inspired by [[https://github.com/istib/rainbow-blocks][rainbow-blocks]], [[https://github.com/Fanael/rainbow-identifiers][rainbow-identifiers]], and [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]].

* Development
:PROPERTIES:
:TOC:      ignore
:END:

Bug reports, feature requests, suggestions â€” /oh my/!

In the event that a bug in the font-locking functions cause Emacs to enter an infinite loop, you can stop it without killing Emacs by following these steps:

1.  From a shell, run ~pkill -SIGUSR2 emacs~.  Usually once is enough, but not always.
2.  After Emacs displays a backtrace, switch to the buffer where ~prism-mode~ was enabled and call ~prism-mode~ again to disable it.
3.  Please report the backtrace to the issue tracker so it can be fixed.  Include contents of the buffer when possible.

* License
:PROPERTIES:
:TOC:      ignore
:END:

GPLv3

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# End:


